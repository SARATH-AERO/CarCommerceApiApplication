import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.*;

import com.example.carCommerce.dto.*;
import com.example.carCommerce.service.BuyerService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.List;

@WebMvcTest(BuyerController.class)
public class BuyerControllerTest {

    private MockMvc mockMvc;

    @MockBean
    private BuyerService buyerService;

    @InjectMocks
    private BuyerController buyerController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders
                .standaloneSetup(buyerController)
                .apply(springSecurity()) // Enable Spring Security
                .build();
    }

    @Test
    @WithMockUser(roles = "BUYER")
    public void testGetBuyerByEmail() throws Exception {
        String email = "test@example.com";
        ResponseBuyerDto responseBuyerDto = new ResponseBuyerDto();
        when(buyerService.getBuyerByEmail(email)).thenReturn(responseBuyerDto);

        mockMvc.perform(get("/api/carCommerceApi/v1/buyer")
                        .param("email", email))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.email").value(email));  // Customize based on ResponseBuyerDto structure

        verify(buyerService, times(1)).getBuyerByEmail(email);
    }

    @Test
    @WithMockUser(roles = "BUYER")
    public void testGetAllCars() throws Exception {
        List<CarDto> carDtoList = List.of(new CarDto(), new CarDto());
        when(buyerService.getAllCar()).thenReturn(carDtoList);

        mockMvc.perform(get("/api/carCommerceApi/v1/buyer/getAllCars"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.length()").value(carDtoList.size()));

        verify(buyerService, times(1)).getAllCar();
    }

    @Test
    @WithMockUser(roles = "BUYER")
    public void testUpdateUser() throws Exception {
        String email = "test@example.com";
        UpdateBuyerDto updateBuyerDto = new UpdateBuyerDto();
        MessageDto messageDto = new MessageDto("User updated successfully.");
        when(buyerService.updateBuyer(eq(email), any(UpdateBuyerDto.class))).thenReturn(messageDto);

        mockMvc.perform(put("/api/carCommerceApi/v1/buyer")
                        .param("email", email)
                        .contentType("application/json")
                        .content("{\"field\": \"value\"}")) // Customize JSON based on UpdateBuyerDto structure
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("User updated successfully."));

        verify(buyerService, times(1)).updateBuyer(eq(email), any(UpdateBuyerDto.class));
    }

    @Test
    @WithMockUser(roles = "BUYER")
    public void testPurchaseCar() throws Exception {
        String email = "test@example.com";
        Integer carId = 1;
        MessageDto messageDto = new MessageDto("Car purchased successfully.");
        when(buyerService.purchaseCar(email, carId)).thenReturn(messageDto);

        mockMvc.perform(put("/api/carCommerceApi/v1/buyer/carPurchase")
                        .param("email", email)
                        .param("carId", carId.toString()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Car purchased successfully."));

        verify(buyerService, times(1)).purchaseCar(email, carId);
    }

    @Test
    @WithMockUser(roles = "BUYER")
    public void testDeleteBuyer() throws Exception {
        String email = "test@example.com";
        MessageDto messageDto = new MessageDto("Buyer deleted successfully.");
        when(buyerService.deleteBuyer(email)).thenReturn(messageDto);

        mockMvc.perform(delete("/api/carCommerceApi/v1/buyer")
                        .param("email", email))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Buyer deleted successfully."));

        verify(buyerService, times(1)).deleteBuyer(email);
    }
}

--
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.http.HttpHeaders;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(BuyerController.class)
public class BuyerControllerJwtTest {

    private MockMvc mockMvc;

    @MockBean
    private BuyerService buyerService;

    @InjectMocks
    private BuyerController buyerController;

    private String jwtToken;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders
                .standaloneSetup(buyerController)
                .apply(springSecurity())
                .build();

        // Generate JWT Token with ROLE_BUYER
        jwtToken = JwtTestUtil.generateToken("test@example.com", "ROLE_BUYER");
    }

    @Test
    public void testGetBuyerByEmailWithJwt() throws Exception {
        String email = "test@example.com";
        ResponseBuyerDto responseBuyerDto = new ResponseBuyerDto();
        when(buyerService.getBuyerByEmail(email)).thenReturn(responseBuyerDto);

        mockMvc.perform(get("/api/carCommerceApi/v1/buyer")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + jwtToken)
                        .param("email", email))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.email").value(email));

        verify(buyerService, times(1)).getBuyerByEmail(email);
    }

    @Test
    public void testGetAllCarsWithJwt() throws Exception {
        List<CarDto> carDtoList = List.of(new CarDto(), new CarDto());
        when(buyerService.getAllCar()).thenReturn(carDtoList);

        mockMvc.perform(get("/api/carCommerceApi/v1/buyer/getAllCars")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.length()").value(carDtoList.size()));

        verify(buyerService, times(1)).getAllCar();
    }

    @Test
    public void testUnauthorizedAccessWithoutJwt() throws Exception {
        mockMvc.perform(get("/api/carCommerceApi/v1/buyer")
                        .param("email", "test@example.com"))
                .andExpect(status().isForbidden());  // Or Unauthorized depending on your security setup

        verify(buyerService, times(0)).getBuyerByEmail(any());
    }

    @Test
    public void testAccessWithInvalidJwt() throws Exception {
        String invalidToken = "Bearer invalid-token";

        mockMvc.perform(get("/api/carCommerceApi/v1/buyer")
                        .header(HttpHeaders.AUTHORIZATION, invalidToken)
                        .param("email", "test@example.com"))
                .andExpect(status().isUnauthorized());  // For invalid token

        verify(buyerService, times(0)).getBuyerByEmail(any());
    }

    @Test
    public void testForbiddenAccessWithWrongRoleJwt() throws Exception {
        // Generate JWT Token with a different role, e.g., ROLE_ADMIN
        String adminToken = JwtTestUtil.generateToken("test@example.com", "ROLE_ADMIN");

        mockMvc.perform(get("/api/carCommerceApi/v1/buyer")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + adminToken)
                        .param("email", "test@example.com"))
                .andExpect(status().isForbidden());  // For forbidden access due to incorrect role

        verify(buyerService, times(0)).getBuyerByEmail(any());
    }
}
